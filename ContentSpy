--[[
	// Content Spy //
	// wally#7486 / wallythemad @ v3rmillion.net
]]--

assert(getrawmetatable, "not supported")
local genv = (getgenv and getgenv() or _G)
local interface = game:GetObjects("rbxassetid://1762060839")[1]

if game:GetService("CoreGui"):FindFirstChild("ContentSpy") then
	game:GetService("CoreGui"):FindFirstChild("ContentSpy"):Destroy()
end

interface.Parent = game:GetService('CoreGui');
interface = interface.Background

interface.Active = true
interface.Draggable = true

genv.http_output = genv.http_output or {}
genv.http_checks = genv.http_checks or {
	Http = false,
	GetObjects = false,
}

local colors = {
	Enabled = Color3.fromRGB(250, 250, 250),
	Disabled = Color3.fromRGB(38, 38, 38)
}

local sizes = {
	Open = UDim2.new(0, 435, 0, 297),
	Close = UDim2.new(0, 435, 0, 30)
}

interface.Close.MouseButton1Click:connect(function()
	local size = interface.Size == sizes.Open and "Close" or "Open"
	local dir = size == "Open" and "Out" or "In"
	local sty = size == "Open" and "Sine" or "Back"

	interface:TweenSize(sizes[size], dir, sty, 0.25, true)
end)

for _, button in next, {interface.Http, interface.GetObjects} do
	local n = button.Name

	button.BackgroundColor3 = colors[(http_checks[n] and "Enabled" or "Disabled")]
	button.AutoButtonColor = false
	button.MouseButton1Click:connect(function()
		http_checks[n] = not http_checks[n]

		button.BackgroundColor3 = colors[(http_checks[n] and "Enabled" or "Disabled")]
	end)
end

interface.Write.AutoButtonColor = false
interface.Write.MouseButton1Click:connect(function()
	local name = interface.FileName.Text

	if name == "Name" then
		name = "Http_Output"
	end

	if writefile then
		local new = {}

		if #http_output == 0 then 
			return 
		end

		for i, t in next, http_output do
			local str = "Type: %s\nContent: %s\n"

			str = string.format(str, tostring(t.method), tostring(t.URL))

			table.insert(new, str)
		end

		if pcall(writefile, (name .. ".txt"), table.concat(new, "\n")) then
			interface.FileName.Text = "Done!"
			wait(.75)
			interface.FileName.Text = "Name"
		end
	end
end)

-- not overwriting twice
local mt = getrawmetatable(game)
local __index = genv.index or mt.__index
local __namecall = genv.namecall or mt.__namecall

do
	for name, real in next, {["index"] = __index, ["namecall"] = __namecall} do
		if not genv[name] then
			genv[name] = real
		end
	end

	-- // set the readonly flag of mt
	local w = (setreadonly or make_writeable or fullaccess or function() return end)

	do
		w(mt, false)
	end
end

local checks = {
	HttpGet = {
		Method = "Http"
	},

	HttpPost = {
		Method = "Http"
	},

	HttpGetAsync = {
		Method = "Http"
	},

	HttpPostAsync = {
		Method = "Http"
	},

	GetObjects = {
		Method = "GetObjects"
	},
}

local function Create(class, p)
	local o = Instance.new(class)

	for n, prop in next, p do
		if n ~= "Parent" then
			o[n] = prop
		end
	end

	pcall(function() o['Parent'] = p['Parent'] end)

	return o
end

local function output()
	interface.Output:ClearAllChildren()

	for i, thing in next, http_output do
		local frame = Create("Frame", {
			Name = 'Log',
			BackgroundTransparency = 1,
			Position = UDim2.new(0, 0, 0, (i * 50) - 50),
			Size = UDim2.new(0, 425, 0, 50),
			Parent = interface.Output
		})

		for n, info in next, {['Type'] = {p = 1, t = "method"}, ['Content'] = {p = 2, t = 'URL'}} do
			local x = Create('TextLabel', {
				Name = n,
				Parent = frame,

				Size = UDim2.new(0, 425, 0, 25),
				Position = UDim2.new(0, 0, 0, (info.p * 25) - 25),

				TextColor3 = Color3.fromRGB(255, 255, 255),
				Text = " " .. n .. ": " .. thing[info["t"]],
				Font = Enum.Font.SourceSans,
				TextSize = 20,
				TextWrapped = true,
				BackgroundTransparency = 1, 
				TextXAlignment = Enum.TextXAlignment.Left
			})

			local b = Create('TextLabel', {
				Name = n,
				Parent = frame,

				Size = UDim2.new(0, 425, 0, 3),
				Position = UDim2.new(0, 0, 0, 50),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Text = ""
			})
		end
	end

	interface.Output.CanvasSize = UDim2.new(0, 0, 0, (50 * #http_output))

end

local checkcaller = checkcaller or function(e)
	return e.getrawmetatable
end

mt.__namecall = function(self, ...)
	local packed = {...}
	local method = packed[#packed]

	if checks[method] and http_checks[checks[method].Method] and checkcaller(getfenv(2)) then
		-- ugly
		if method == 'GetObjects' and packed[1] == "rbxassetid://1762060839" then
			return __namecall(self, ...)
		end

		table.insert(http_output, {
			method = method,
			URL = tostring(packed[1])
		})
	
		output()
	end

	return __namecall(self, ...)
end


mt.__index = function(t, k)
	if t == game and checkcaller(getfenv(2)) then		
		if k == 'HttpGet' then
			return function(self, url, ...)
				return game:HttpGet(url, ...)
			end
		elseif k == 'HttpPost' then
			return function(self, url, ...)
				return game:HttpPost(url, ...)
			end
		elseif k == 'HttpGetAsync' then
			return function(self, url, ...)
				return game:HttpGetAsync(url, ...)
			end
		elseif k == 'HttpPostAsync' then
			return function(self, url, ...)
				return game:HttpPostAsync(url, ...)
			end
		elseif k == 'GetObjects' then
			return function(self, url)
				return game:GetObjects(url)
			end
		end
	end

	return __index(t, k)
end

output()
